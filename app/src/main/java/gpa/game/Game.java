/*
 * This source file was generated by the Gradle 'init' task
 */
package gpa.game;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

public class Game extends JPanel implements ActionListener, KeyListener {
    private Timer timer;
    private ArrayList<Grade> grades;
    private Student student;
    private int score;
    private boolean isGameOver;
    private CardLayout cardLayout;
    private JPanel cards;
    private JFrame frame;
    
    public Game(JFrame frame, CardLayout cardLayout, JPanel cards) {
        this.frame = frame;
        this.cardLayout = cardLayout;
        this.cards = cards;

        this.setPreferredSize(new Dimension(800, 600));
    }
    
    public void initGame(){
        this.setBackground(Color.BLACK);
        this.setFocusable(true);
        this.requestFocusInWindow();
        this.addKeyListener(this);
        this.isGameOver = false;
        this.grades = new ArrayList<>();
        this.student = new Student(350, 435, 128, 128);
        this.score = 0;

        this.timer = new Timer(16, this); // ~60 FPS
        timer.start();
    }
    @Override
    public void addNotify() {
        super.addNotify();
        requestFocusInWindow(); // Automatically request focus
    }
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Draw grade
        for (Grade grade : grades) {
            grade.draw(g);
        }
        
        // Draw basket
        student.draw(g);

        // Draw score
        g.setColor(Color.WHITE);
        g.drawString("Score: " + score, 10, 20);
        
        if (isGameOver) {
            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.BOLD, 36));
            g.drawString("Game Over!", 300, 250);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        if (!isGameOver){
            for (Grade grade : grades) {
                // Update grade positions
                grade.moveGrade();
                
                // Check for collision with student
                if (grade.y + grade.height >= student.y && grade.x + grade.width >= student.x && grade.x <= student.x + student.width) {
                    if ("F".equals(grade.getGradeChar())){
                        student.changeImage("sad");
                        repaint();
                        isGameOver = true;
                        timer.stop();
                        showGameOverScreen();
                    }
                    score++;
                    grades.remove(grade);
                    break;
                }

                // Remove grade if it falls out
                if (grade.y > 600) {
                    grades.remove(grade);
                    break;
                }
            }

           // Add new grades
            if (new Random().nextInt(100) < 5) { // 5% chance to spawn a grade per frame
                grades.add(GradeFactory.getRandomGrade());
            }

            repaint();
        }
    }
    
    private void showGameOverScreen() {
        
        GameOverScreen dialog = new GameOverScreen(frame, true, cardLayout, cards, score);
        dialog.setLocationRelativeTo(frame);
        dialog.setVisible(true);
        
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            moveLeftOrRight(new MoveLeftCommand() );

        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            moveLeftOrRight(new MoveRightCommand() );

        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    
    public void moveLeftOrRight(MovementCommand movementCommand){
        movementCommand.execute(student);
    }
}

